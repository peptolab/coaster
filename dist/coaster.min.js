/*!
 * Coaster.js v1.0.0
 * (c) 2020-2020 Simon Mundy <simon.mundy@peptolab.com> (https://www.peptolab.com)
 * Released under the MIT License.
 */
!function(s,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(s="undefined"!=typeof globalThis?globalThis:s||self).Coaster=t()}(this,(function(){"use strict";return class extends class{constructor(s,t){this.DOM={carousel:s,track:null,slides:null,navPrev:null,navNext:null,navPaginator:null},this.carousel={index:-1,current:null,after:null,before:null,autoplay:null,delay:null,fn:{navigate:null,dragStart:null,dragEnd:null,dragMove:null,transitionEnd:null,autoplay:null}},this.options={threshold:100,drag:{touch:!0,mouse:!1},autoplay:{active:!1,interval:0},transition:{type:{click:"slide"}},selector:{track:"[data-carousel-track]",slide:"[data-carousel-slide]",caption:"[data-carousel-slide]",navPrev:'[data-carousel-nav="prev"]',navNext:'[data-carousel-nav="next"]',paginator:"[data-carousel-pagination] [data-carousel-nav]"},onStart:null,onStop:null,onPause:null,onChange:null},this.setOptions(t),this.setSlides(),this.setCarousel(),this.setNav(),this.addListeners(),this.options.autoplay.active&&this.play(),this.options.onStart&&this.options.onStart(this.carousel.current)}setOptions(s){this.options=Object.assign(this.options,s)}setCarousel(){this.carousel.fn.navigate=this.clickNavigate.bind(this),this.carousel.fn.dragStart=this.dragStart.bind(this),this.carousel.fn.dragEnd=this.dragEnd.bind(this),this.carousel.fn.dragMove=this.dragMove.bind(this),this.carousel.fn.transitionEnd=this.transitionEnd.bind(this),this.carousel.index=0,this.carousel.current=this.DOM.slides[this.carousel.index],this.carousel.current.classList.add("active"),this.options.onChange&&this.options.onChange(this.carousel,this.DOM)}setSlides(){if(this.DOM.track=this.DOM.carousel.querySelector(this.options.selector.track),this.DOM.slides=[...this.DOM.carousel.querySelectorAll(this.options.selector.slide)],!this.DOM.slides.length)return!1}setNav(){this.DOM.navPrev=this.DOM.carousel.querySelector(this.options.selector.navPrev),this.DOM.navNext=this.DOM.carousel.querySelector(this.options.selector.navNext),this.DOM.navPaginator=[...this.DOM.carousel.querySelectorAll(this.options.selector.paginator)]}setCaption(){this.DOM.caption=this.DOM.carousel.querySelector("[data-carousel-caption]")}addListeners(){this.options.drag.touch&&(this.DOM.track.addEventListener("touchstart",this.carousel.fn.dragStart),this.DOM.track.addEventListener("touchend",this.carousel.fn.dragEnd),this.DOM.track.addEventListener("touchmove",this.carousel.fn.dragMove)),this.options.drag.mouse&&this.DOM.track.addEventListener("mousedown",this.carousel.fn.dragStart),this.DOM.navPrev.addEventListener("click",this.carousel.fn.navigate),this.DOM.navNext.addEventListener("click",this.carousel.fn.navigate),this.DOM.navPaginator.forEach((s=>s.addEventListener("click",this.carousel.fn.navigate)))}play(){this.options.autoplay.active=!0,this.carousel.fn.autoplay=this.autoplay.bind(this),this.carousel.autoplay=setTimeout(this.carousel.fn.autoplay,this.options.autoplay.interval)}pause(){this.options.autoplay.active=!1,clearTimeout(this.carousel.autoplay)}autoplay(){this.navigate("next",this.options.transition.type.click),this.options.autoplay.active&&this.play()}navigate(s,t){switch(s){case"prev":(s=this.carousel.index-1)<0&&(s=this.DOM.slides.length-1),this.carousel.direction="prev",this.carousel.opposite="next";break;case"next":(s=this.carousel.index+1)>=this.DOM.slides.length&&(s=0),this.carousel.direction="next",this.carousel.opposite="prev";break;default:s-=1,this.carousel.direction=s<this.carousel.index?"prev":"next",this.carousel.opposite=s<this.carousel.index?"next":"prev"}if(s==this.carousel.index)return!1;switch(this.carousel.before=this.DOM.slides[this.carousel.index],this.transitionClear(this.carousel.before),this.carousel.current=this.DOM.slides[s],this.transitionClear(this.carousel.current),this.carousel.index=s,t){case"fade":case"slide":this.carousel.before.baseTransitionClass=`carousel__transition--${t}`,this.carousel.before.moveTransitionClass=`carousel__transition--${t}-${this.carousel.direction}`,window.requestAnimationFrame((s=>{this.carousel.before.addEventListener("transitionend",this.carousel.fn.transitionEnd),this.carousel.before.classList.add(this.carousel.before.baseTransitionClass),this.carousel.before.classList.add(this.carousel.before.moveTransitionClass),this.carousel.before.classList.add("transitioning")})),this.carousel.current.baseTransitionClass=`carousel__transition--${t}`,this.carousel.current.moveTransitionClass=`carousel__transition--${t}-${this.carousel.opposite}`,this.carousel.current.classList.add(this.carousel.current.moveTransitionClass),window.requestAnimationFrame((s=>{this.carousel.current.addEventListener("transitionend",this.carousel.fn.transitionEnd),this.carousel.current.classList.remove(this.carousel.current.moveTransitionClass),this.carousel.current.classList.add(this.carousel.current.baseTransitionClass),this.carousel.current.classList.add("transitioning")}));break;case"drag":this.carousel.before.baseTransitionClass=`carousel__transition--${t}`,this.carousel.before.moveTransitionClass=`carousel__transition--${t}-${this.carousel.direction}`,this.carousel.before.addEventListener("transitionend",this.carousel.fn.transitionEnd),this.carousel.before.classList.add(this.carousel.before.baseTransitionClass),this.carousel.before.classList.add(this.carousel.before.moveTransitionClass),this.carousel.before.classList.add("transitioning"),this.carousel.current.baseTransitionClass=`carousel__transition--${t}`,this.carousel.current.classList.add(this.carousel.current.baseTransitionClass),this.carousel.current.addEventListener("transitionend",this.carousel.fn.transitionEnd),this.carousel.current.style.transform="translateX(0)",this.carousel.current.classList.add("transitioning")}this.carousel.before.classList.remove("active"),this.carousel.current.classList.add("active"),this.options.onChange&&this.options.onChange(this.carousel,this.DOM)}clickNavigate(s){this.navigate(s.currentTarget.dataset.carouselNav,this.options.transition.type.click),this.pause()}dragStart(s){s=s||window.event,this.pause(),this.carousel.currentInitialX=this.carousel.current.offsetLeft,"touchstart"==s.type?this.carousel.dragInitialX=this.carousel.newX=s.touches[0].clientX:(this.carousel.dragInitialX=this.carousel.newX=s.clientX,document.addEventListener("mouseup",this.carousel.fn.dragEnd),document.addEventListener("mousemove",this.carousel.fn.dragMove)),this.carousel.before=this.carousel.index>0?this.DOM.slides[this.carousel.index-1]:this.DOM.slides[this.DOM.slides.length-1],this.carousel.after=this.carousel.index<this.DOM.slides.length-1?this.DOM.slides[this.carousel.index+1]:this.DOM.slides[0],[this.carousel.current,this.carousel.before,this.carousel.after].forEach((s=>{this.dragPrepare(s),s.classList.add("dragging")})),this.dragPosition()}dragPrepare(s){this.transitionClear(s)}dragMove(s){"touchmove"==(s=s||window.event).type?this.carousel.newX=s.touches[0].clientX:this.carousel.newX=s.clientX,this.dragPosition()}dragPosition(){this.carousel.calculatedX=this.carousel.currentInitialX-(this.carousel.dragInitialX-this.carousel.newX);let s=this.carousel.currentInitialX-(this.carousel.dragInitialX-this.carousel.newX);this.carousel.current.style.transform=`translateX(${this.carousel.calculatedX}px)`,s>0?(this.carousel.before.style.transform=`translateX(${this.carousel.calculatedX-this.carousel.current.offsetWidth}px)`,this.carousel.before!=this.carousel.after&&(this.carousel.after.style.transform=`translateX(${this.carousel.calculatedX+this.carousel.current.offsetWidth}px)`)):(this.carousel.after.style.transform=`translateX(${this.carousel.calculatedX+this.carousel.current.offsetWidth}px)`,this.carousel.before!=this.carousel.after&&(this.carousel.before.style.transform=`translateX(${this.carousel.calculatedX-this.carousel.current.offsetWidth}px)`))}dragEnd(s){[this.carousel.current,this.carousel.before,this.carousel.after].forEach((s=>{s.classList.remove("dragging")}));let t=this.carousel.currentInitialX-(this.carousel.dragInitialX-this.carousel.newX);t<-this.options.threshold?(this.dragReset(this.carousel.before),this.navigate("next","drag"),s.preventDefault()):t>this.options.threshold?(this.dragReset(this.carousel.after),this.navigate("prev","drag"),s.preventDefault()):[this.carousel.current,this.carousel.before,this.carousel.after].forEach((s=>this.dragReset(s))),document.removeEventListener("mouseup",this.carousel.fn.dragEnd),document.removeEventListener("mousemove",this.carousel.fn.dragMove)}dragReset(s){s.addEventListener("transitionend",this.carousel.fn.transitionEnd),s.style.transform=null}transitionEnd(s){const t=s.target;this.transitionClear(t)}transitionClear(s){if(!s)return!1;void 0!==s.baseTransitionClass&&(s.classList.remove(s.baseTransitionClass),delete s.baseTransitionClass),void 0!==s.moveTransitionClass&&(s.classList.remove(s.moveTransitionClass),delete s.moveTransitionClass),s.style.transform=null,s.classList.remove("transitioning"),s.removeEventListener("transitionend",this.carousel.fn.transitionEnd)}}{}}));
